// Generated by CoffeeScript 1.8.0
(function() {
  var $, EventEmitter2, Slide, inherits;

  $ = require('jquery');

  inherits = require('inherits');

  EventEmitter2 = require('eventemitter2').EventEmitter2;

  Slide = (function() {
    "use strict";
    inherits(Slide, EventEmitter2);

    Slide.prototype._defaults = {
      contents: '.js-slide-contents',
      pager: '.js-slide-pager',
      prev: '.js-slide-prev',
      next: '.js-slide-next',
      start: 0
    };

    function Slide(opts) {
      EventEmitter2.call(this);
      this.opts = $.extend({}, this._defaults, opts);
      this.$contents = $(this.opts.contents);
      this.$prev = $(this.opts.prev);
      this.$next = $(this.opts.next);
      this.$pager = $(this.opts.pager);
      this._current = this.opts.start;
      this.events();
    }

    Slide.prototype.setCurrent = function(num) {
      return this._current = num;
    };

    Slide.prototype.getCurrent = function() {
      return this._current;
    };

    Slide.prototype.init = function(num) {
      if (num != null) {
        this.setCurrent(num);
      }
      this.$contents.hide().eq(this.getCurrent()).show();
      this.pagerSetCurrent(this.getCurrent());
      return this;
    };

    Slide.prototype.hideAll = function() {
      return $.Deferred((function(_this) {
        return function(d) {
          var defer, defers, i, _i, _len, _ref;
          defers = [];
          _ref = _this.$contents;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            defer = $.Deferred();
            defers.push(defer.promise());
            _this.$contents[i].stop(true, true).fadeOut(function() {
              return defer.resolve();
            });
          }
          return $.when.apply($, defers).done(function() {
            return d.resolve();
          });
        };
      })(this)).promise();
    };

    Slide.prototype.show = function(num) {
      this.$contents.eq(num).stop(true, true).fadeIn(300);
      this.setCurrent(num);
      return this;
    };

    Slide.prototype.change = function(num) {
      if (this.getCurrent() === num) {
        return this;
      }
      this.emit('change');
      this.hideAll().done((function(_this) {
        return function() {
          return _this.show(num);
        };
      })(this));
      this.pagerSetCurrent(num);
      return this;
    };

    Slide.prototype.pagerSetCurrent = function(target) {
      this.$pager.removeClass('slide-current').eq(target).addClass('slide-current');
      return this;
    };

    Slide.prototype.events = function() {
      this.$prev.on('click.slideprev', (function(_this) {
        return function(ev) {
          var target;
          ev.preventDefault();
          if (_this.getCurrent() === 0) {
            target = _this.$contents.length - 1;
          } else {
            target = _this.getCurrent() - 1;
          }
          return _this.change(target);
        };
      })(this));
      this.$next.on('click.slidenext', (function(_this) {
        return function(ev) {
          var target;
          ev.preventDefault();
          if (_this.getCurrent() === _this.$contents.length - 1) {
            target = 0;
          } else {
            target = _this.getCurrent() + 1;
          }
          return _this.change(target);
        };
      })(this));
      (function(_this) {
        return (function() {
          var that;
          that = _this;
          return _this.$pager.on('click.slidepager', function(ev) {
            var target;
            ev.preventDefault();
            target = that.$pager.index(this);
            return that.change(target);
          });
        });
      })(this)();
      return this;
    };

    return Slide;

  })();

  if (typeof define === 'function' && define.amd) {
    define(function() {
      return Slide;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = Slide;
  } else {
    window.Slide || (window.Slide = Slide);
  }

}).call(this);
